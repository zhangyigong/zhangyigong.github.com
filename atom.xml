<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[张一弓的Blog]]></title>
  <subtitle><![CDATA[眯着眼睛安静思考世界的攻城狮]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://zhangyigong.github.com/"/>
  <updated>2015-01-19T11:50:59.447Z</updated>
  <id>http://zhangyigong.github.com/</id>
  
  <author>
    <name><![CDATA[Lionel]]></name>
    <email><![CDATA[zhang_1g@163.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[漫谈验证码（二） 使用开源组件生成验证码]]></title>
    <link href="http://zhangyigong.github.com/2015/01/17/verification-code-generate-by%20-opensource-component/"/>
    <id>http://zhangyigong.github.com/2015/01/17/verification-code-generate-by -opensource-component/</id>
    <published>2015-01-17T08:53:28.000Z</published>
    <updated>2015-01-19T11:50:51.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://zhang1g.qiniudn.com/kaptcha-verify-code1.gif" alt="使用开源组件生成验证码"></p>
<h2 id="开源组件简介">开源组件简介</h2>
<p>在<a href="http://zhangyigong.github.io/2015/01/16/verification-code-generated-by-java-servlet/" target="_blank" rel="external">漫谈验证码（一） 使用Servlet 生成验证码</a>一文中，我们介绍了使用Servlet 生成验证码的方法。但是生成的验证码图片比较简单，使用图像识别的方法还是很容易破解，因此我们在实际应用中希望能够生成比较复杂的验证码图片，比如汉字、算式等，并且添加一些干扰。</p>
<p>使用一些相关的开源组件可以很容易的实现上述功能。常见的开源组件包括Kaptcha、jCaptcha 和Simplecaptcha。</p>
<a id="more"></a>

<p>SimpleCaptcha 是很棒的项目，但是，SimpleCaptcha 似乎没有被维护和更新，在JDK1.5 和Servlet 输出的HTTP 头部情况下还存在一些问题，有一堆的错误报告。 近几年，SimpleCaptcha 的论坛没有任何的消息，也没有新的版本或任何改变。 </p>
<p>jCaptcha 是很多Java 开发者使用的验证码组件，但是默认的配置相对有点恶心，它是一个很棒的项目，但绝对不是一个快速解决方案，更像是一个库。在网站上，它默认输出的样式不是太难分辨就是不够好，也相当的慢。</p>
<p>肯定的是，你需要花很多的时间来熟悉它的API。但事实是，我愿意是一个简单的jar 包文件，轻松地导入我的项目，然后在web.xml 添加几行代码即可。 </p>
<p>因此，这里推荐一个非常简单的验证码组件：<strong>Kaptcha</strong>。 </p>
<p>Kaptcha 很容易安装使用，并且默认输出验证码。默认产生的验证码和放在这篇博客最前面的验证码图片很相似。如果你想改变输出的样式，可以通过配置一组选项，就可以输出自定义的变形样式。</p>
<p>接下来我们将使用Kaptcha 开源组件来生成不同格式的复杂的验证码图片。</p>
<h2 id="Kaptcha_组件生成复杂验证码">Kaptcha 组件生成复杂验证码</h2>
<p>在Web 项目中使用Kaptcha 组件非常简便，只需要以下几个步骤即可，其中最复杂的是配置相应的web.xml 文件。</p>
<ol>
<li>下载Kaptcha-2.x.jar</li>
<li>将jar 包导入项目</li>
<li>编写页面</li>
<li>配置web.xml </li>
<li>启动项目</li>
</ol>
<p>在配置web.xml 时，添加Kaptcha 组件对应的Servlet 配置项是必须的，Kaptcha 组件的其他配置项也都是在web.xml 中进行，稍后会进行介绍。最核心的配置如下所示</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>Kaptcha<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span></div><div class="line">		com.google.code.kaptcha.servlet.KaptchaServlet</div><div class="line">	<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></div></pre></td></tr></table></figure>

<p>下面我们就逐步开始使用Kaptcha 来生成不同类型的复杂验证码图片，包括字母数字混合、汉字、算式等，并增加不同类型的干扰效果。</p>
<p><strong>默认验证码的生成</strong></p>
<p>新建一个名为KaptchaVerifyCode 的Java Web 项目，右键点击项目工程，在属性中修改项目的默认编码格式为UTF-8。</p>
<p>在<a href="http://code.google.com/p/kaptcha/downloads/list" target="_blank" rel="external">官网</a>下载Kaptcha 组件的jar 包，或者在百度云搜索下载，我下载使用的是<a href="http://pan.baidu.com/share/link?shareid=161907&amp;uk=3927561956" target="_blank" rel="external">kaptcha-2.3.2.jar</a>。</p>
<p>将jar 包导入到项目的WEB-INFO/lib 目录下，并添加JSTL 支持（将jstl.jar 和standard.jar 也添加到项目的WEB-INFO/lib 目录中，并在JSP 页面中添加语句 <code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</code> ）。</p>
<p>在web.xml 中配置Kaptcha 组件相关的servlet 和servlet-mapping，具体如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>Kaptcha<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span></div><div class="line">		com.google.code.kaptcha.servlet.KaptchaServlet</div><div class="line">	<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>Kaptcha<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/KaptchaVerifyCode.jpg<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>

<p>在index.jsp 页面中添加验证码图片显示的HTML 代码如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">img</span> <span class="attribute">alt</span>=<span class="value">"验证码"</span> <span class="attribute">src</span>=<span class="value">"KaptchaVerifyCode.jpg"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></div></pre></td></tr></table></figure>

<p>开启tomcat 服务器，在浏览器中输入 <code>http://localhost:8080/KaptchaVerifyCode/</code> 即可看到Kaptcha 组件默认生成的验证码图片。</p>
<p><img src="http://zhang1g.qiniudn.com/kaptcha-verify-code2.PNG" alt="Kaptcha 组件生成验证码默认效果"></p>
<p><strong>Kaptcha 组件的详细配置</strong></p>
<p>Kaptcha 所有的参数都有默认的配置，如果我们不显式配置的话，会采取默认的配置。<br>如果要显式配置Kaptcha ，在配置Kaptcha 对应的Servlet 时，在init-param 增加相应的参数即可。</p>
<p>全部详细的参数配置可以参考<a href="http://code.google.com/p/kaptcha/wiki/ConfigParameters" target="_blank" rel="external">官网Kaptcha 参数配置详细信息</a>，如果打开比较慢也可以参考<a href="http://www.360doc.com/content/12/0224/04/1542811_189166409.shtml" target="_blank" rel="external">360doc-Google kaptcha配置属性表</a>。</p>
<p>下面列出了常见的参数配置类型</p>
<ul>
<li>验证码的字体 </li>
<li>验证码字体的大小 </li>
<li>验证码字体的字体颜色 </li>
<li>验证码内容的范围(数字，字母，中文汉字！) </li>
<li>验证码图片的大小，边框，边框粗细，边框颜色 </li>
<li>验证码的干扰线(可以自己继承 <code>com.google.code.kaptcha.NoiseProducer</code> 写一个自定义的干扰线) </li>
<li>验证码的样式(鱼眼样式、3D、普通模糊……)</li>
</ul>
<p>详细信息如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">kaptcha.border  是否有边框  默认为<span class="constant">true</span>  我们可以自己设置yes，no</div><div class="line">kaptcha.border.color   边框颜色   默认为Color.BLACK</div><div class="line">kaptcha.border.thickness  边框粗细度  默认为<span class="number">1</span></div><div class="line">kaptcha.producer.impl   验证码生成器  默认为DefaultKaptcha</div><div class="line">kaptcha.textproducer.impl   验证码文本生成器  默认为DefaultTextCreator</div><div class="line">kaptcha.textproducer.<span class="keyword">char</span>.<span class="keyword">string</span>   验证码文本字符内容范围  </div><div class="line">                                   默认为abcde2345678gfynmnpwx</div><div class="line">kaptcha.textproducer.<span class="keyword">char</span>.<span class="built_in">length</span>   验证码文本字符长度  默认为<span class="number">5</span></div><div class="line">kaptcha.textproducer.font.names    验证码文本字体样式  </div><div class="line">                                   默认为<span class="built_in">new</span> Font(<span class="string">"Arial"</span>, <span class="number">1</span>, fontSize), </div><div class="line">                                   <span class="built_in">new</span> Font(<span class="string">"Courier"</span>, <span class="number">1</span>, fontSize)</div><div class="line">kaptcha.textproducer.font.size   验证码文本字符大小  默认为<span class="number">40</span></div><div class="line">kaptcha.textproducer.font.color  验证码文本字符颜色  默认为Color.BLACK</div><div class="line">kaptcha.textproducer.<span class="keyword">char</span>.<span class="constant">space</span>  验证码文本字符间距  默认为<span class="number">2</span></div><div class="line">kaptcha.noise.impl    验证码噪点生成对象  默认为DefaultNoise</div><div class="line">kaptcha.noise.color   验证码噪点颜色   默认为Color.BLACK</div><div class="line">kaptcha.obscurificator.impl   验证码样式引擎  默认为WaterRipple</div><div class="line">kaptcha.<span class="built_in">word</span>.impl   验证码文本字符渲染   默认为DefaultWordRenderer</div><div class="line">kaptcha.background.impl   验证码背景生成器   默认为DefaultBackground</div><div class="line">kaptcha.background.<span class="built_in">clear</span>.<span class="built_in">from</span>   验证码背景颜色渐进   默认为Color.LIGHT_GRAY</div><div class="line">kaptcha.background.<span class="built_in">clear</span>.<span class="built_in">to</span>   验证码背景颜色渐进   默认为Color.WHITE</div><div class="line">kaptcha.image.width   验证码图片宽度  默认为<span class="number">200</span></div><div class="line">kaptcha.image.height  验证码图片高度  默认为<span class="number">50</span></div></pre></td></tr></table></figure>

<p>我们简单的在web.xml 中的 <code>&lt;servlet&gt;&lt;/servlet&gt;</code> 标签中添加如下内容</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 是否有边框--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>kaptcha.border<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>no<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span>    </div><div class="line">  <span class="comment">&lt;!-- 字体颜色 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>kaptcha.textproducer.font.color<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>red<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 图片宽度 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>kaptcha.image.width<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>100<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 使用哪些字符生成验证码 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>kaptcha.textproducer.char.string<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>ACDEFHKPRSTWX345679<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 图片高度 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>kaptcha.image.height<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>30<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 字体大小 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>kaptcha.textproducer.font.size<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>28<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 干扰线的颜色 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>kaptcha.noise.color<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>red<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 字符个数 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>kaptcha.textproducer.char.length<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>4<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!-- 使用哪些字体 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>kaptcha.textproducer.font.names<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>Arial<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></div></pre></td></tr></table></figure>

<p>之后无需重启Tomcat，直接刷新浏览器就可以看到最新的显示效果，现在我们就会发现生成的验证码很难被计算机所识别了。</p>
<p><img src="http://zhang1g.qiniudn.com/kaptcha-verify-code3.PNG" alt="经过配置的Kaptcha 验证码"></p>
<p><strong>汉字验证码的生成</strong></p>
<p>Kaptcha 组件中的文本实现类由 <code>com.google.code.kaptcha.text.impl.DefaultTextCreator</code> 默认实现，相应的配置如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--文本实现类--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>kaptcha.textproducer.impl<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="title">param-value</span>&gt;</span></div><div class="line">    com.google.code.kaptcha.text.impl.DefaultTextCreator</div><div class="line">  <span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></div></pre></td></tr></table></figure>

<p>现在我们需要仿照DefaultTextCreator 自定义文本实现类，并将配置文件中的 <code>&lt;param-value&gt;&lt;/param-vaue&gt;</code> 改为我们的自定义实现类即可。</p>
<p>在Github 下载<a href="https://github.com/axet/kaptcha" target="_blank" rel="external">Kaptcha的源码</a>，这是一个使用maven 构建的项目，项目的结构如下所示</p>
<p><img src="http://zhang1g.qiniudn.com/kaptcha-source-structure.PNG" alt="Kaptcha的源码的目录结构"></p>
<p>在Kaptcha 的源码中有生成中文文本的实现类，但是实现过于简单，只能生成一些特定的汉字。因此我们仿照类 <code>DefaultTextCreator</code> 自己实现接口 <code>TextProducer</code> 并继承抽象类 <code>Configurable</code>。</p>
<p>在src 文件夹下新建package，并命名为com.zhang1g.test.kaptchaextend，在包下新建类ChinesetTextCreator，需要我们自己实现getText 方法。</p>
<p><code>ChinesetTextCreator.java</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChinesetTextCreator</span> <span class="keyword">extends</span> <span class="title">Configurable</span> <span class="keyword">implements</span> <span class="title">TextProducer</span> </span>{</div><div class="line"></div><div class="line">  <span class="annotation">@Override</span></div><div class="line">  <span class="keyword">public</span> String <span class="title">getText</span>() {</div><div class="line">    <span class="keyword">int</span> length = getConfig().getTextProducerCharLength();</div><div class="line">    String result = createRandomChinese(length);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">  }</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> String <span class="title">createRandomChinese</span>(<span class="keyword">int</span> len) {</div><div class="line">    String ret = <span class="string">""</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) {</div><div class="line">      String str = <span class="keyword">null</span>;</div><div class="line">      <span class="keyword">int</span> hightPos, lowPos; <span class="comment">// 定义高低位</span></div><div class="line">      Random random = <span class="keyword">new</span> Random();</div><div class="line">      hightPos = (<span class="number">176</span> + Math.abs(random.nextInt(<span class="number">39</span>))); <span class="comment">// 获取高位值</span></div><div class="line">      lowPos = (<span class="number">161</span> + Math.abs(random.nextInt(<span class="number">93</span>))); <span class="comment">// 获取低位值</span></div><div class="line">      <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</div><div class="line">      b[<span class="number">0</span>] = (<span class="keyword">new</span> Integer(hightPos).byteValue());</div><div class="line">      b[<span class="number">1</span>] = (<span class="keyword">new</span> Integer(lowPos).byteValue());</div><div class="line">      <span class="keyword">try</span> {</div><div class="line">        str = <span class="keyword">new</span> String(b, <span class="string">"GBK"</span>); <span class="comment">// 转成中文</span></div><div class="line">      } <span class="keyword">catch</span> (UnsupportedEncodingException ex) {</div><div class="line">        ex.printStackTrace();</div><div class="line">      }</div><div class="line">      ret += str;</div><div class="line">    }</div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">  }</div></pre></td></tr></table></figure>

<p>其中方法createRandomChinese 可以随机生成不同的汉字，其原理可以参考文章<a href="http://blog.csdn.net/hanzengyi/article/details/4796905" target="_blank" rel="external">如何用java随机生成一个汉字?</a>，注意此处汉字的编码格式为GBK。</p>
<p>ChinesetTextCreator 和DefaultTextCreator 一样继承了Configurable抽象类，用来从配置文件中获取验证码的长度。</p>
<p>在实现了汉字生成类之后，需要对web.xml 中的配置参数进行修改，不要忘记要将默认的字体修改为<strong>宋体</strong>，否则验证码图片上的汉字会显示不出来。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">    <span class="comment">&lt;!--文本实现类--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>kaptcha.textproducer.impl<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span></div><div class="line">        com.zhang1g.test.kaptchaextend.ChinesetTextCreator</div><div class="line">      <span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></div><div class="line">...</div><div class="line">    <span class="comment">&lt;!-- 使用哪些字体 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>kaptcha.textproducer.font.names<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>宋体<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></div></pre></td></tr></table></figure>

<p>验证码校验的功能可以参考文章<a href="http://zhangyigong.github.io/2015/01/16/verification-code-generated-by-java-servlet/" target="_blank" rel="external">漫谈验证码（一） 使用Servlet 生成验证码</a>中的实现。需要注意的是，因为之前汉字的编码设置为GBK，所以在获取Post 表单参数时需要对编码格式进行转换。具体实现如下所示，其中的 <code>index_userinput_verifycode</code> 为表单text 域的name 属性值。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">req.setCharacterEncoding(<span class="string">"utf-8"</span>);</div><div class="line"><span class="constant">String userInputVerifyCode</span> = req.getParameter(<span class="string">"index_userinput_verifycode"</span>);</div></pre></td></tr></table></figure>

<p>至此，中文验证码的生成和校验就完成了，重新启动Tomcat 服务器，在浏览器中输入 <code>http://localhost:8080/KaptchaVerifyCode/</code> 即可看到如下效果</p>
<p><img src="http://zhang1g.qiniudn.com/verification-code-chinese1.PNG" alt="使用Kaptcha 组件生成中文验证码"></p>
<p><img src="http://zhang1g.qiniudn.com/verification-code-chinese2.PNG" alt="中文验证码校验成功"></p>
<p><strong>混合验证码的生成</strong></p>
<p>在实际应用中，如果同时使用四个汉字作为验证码，用户体验会很不友好，因此我们可以将英文字母、数字和汉字结合起来生成混合验证码，而且其中只出现一个汉字。</p>
<p>现在我们对文本生成类ChinesetTextCreator 的getText 方法进行修改，使它满足上述要求。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">@<span class="type">Override</span></div><div class="line">public <span class="type">String</span> getText() {</div><div class="line">  <span class="type">int</span> length = getConfig().getTextProducerCharLength();</div><div class="line">  <span class="type">String</span> chineseVerifyCode = createRandomChinese(<span class="number">1</span>);</div><div class="line">  </div><div class="line">  <span class="type">char</span>[] charVerifyCodeCollection = <span class="string">"ABFGHJKMPRSUVXYZ034689"</span>.toCharArray();</div><div class="line">  <span class="type">Random</span> random = new <span class="type">Random</span>();</div><div class="line">  <span class="type">int</span> chineseverifyCodePos = random.nextInt(length); </div><div class="line">  <span class="type">int</span> charLen = charVerifyCodeCollection.length;</div><div class="line">  <span class="type">StringBuffer</span> sb = new <span class="type">StringBuffer</span>();</div><div class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;length ; i++) {</div><div class="line">    <span class="keyword">if</span> (i == chineseverifyCodePos) {</div><div class="line">      sb.append(chineseVerifyCode);</div><div class="line">    }<span class="keyword">else</span> {</div><div class="line">      <span class="type">int</span> index = random.nextInt(charLen);</div><div class="line">      sb.append(charVerifyCodeCollection[index]);</div><div class="line">    }</div><div class="line">  }</div><div class="line">  <span class="type">String</span> <span class="literal">result</span> = sb.toString();</div><div class="line">  <span class="keyword">return</span> <span class="literal">result</span>;</div><div class="line">}</div></pre></td></tr></table></figure>

<p>修改后重新启动Tomcat 服务器，刷新后效果如下</p>
<p><img src="http://zhang1g.qiniudn.com/verification-code-complex1.PNG" alt="Kaptcha 组件生成混合验证码"></p>
<p><img src="http://zhang1g.qiniudn.com/verification-code-complex2.PNG" alt="混合验证码校验成功"></p>
<p><strong>算式验证码的生成</strong></p>
<p>Kaptcha 组件生成复杂的验证码到此就可以结束了，但是在这里我们可以多讲一点点。很多网站的验证码使用了很多新奇的玩意儿，算式验证码就是其中的一种，下面我们对Kaptcha 组件进行一下扩展，使之也可以生成算式验证码。</p>
<p>要实现算式验证码，需要做以下几件事情：</p>
<ol>
<li>获取随机数值，结果相加</li>
<li>将计算公式写到验证码图片中</li>
<li>将相加的结果放到session中</li>
</ol>
<p>这里我们需要重写KaptchaServlet 类。</p>
<p>首先将Kaptcha 源码中的KaptchaServlet 类拷贝到工程中的包com.zhang1g.test.kaptchaextend 内，KaptchaServlet 类继承了HttpServlet，我们只需要重写其中的doGet 方法即可。</p>
<p><code>KaptchaServlet.java</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void doGet(HttpServletRequest req, HttpServletResponse resp)</div><div class="line">    throws ServletException, IOException {</div><div class="line">  <span class="keyword">...</span></div><div class="line"></div><div class="line">  // create the text <span class="keyword">for</span> the image</div><div class="line">  String capText = this.kaptchaProducer.createText();</div><div class="line">  String s1 = capText.substring(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line">  String s2 = capText.substring(<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">  int result = Integer.valueOf(s1).intValue() + Integer.valueOf(s2).intValue();</div><div class="line"></div><div class="line">  // create the image with the text</div><div class="line">  // BufferedImage bi = this.kaptchaProducer.createImage(capText);</div><div class="line">  BufferedImage bi = this.kaptchaProducer.createImage(s1 + <span class="string">"+"</span> + s2</div><div class="line">      + <span class="string">"= ?"</span>);</div><div class="line"></div><div class="line">  <span class="keyword">...</span></div><div class="line"></div><div class="line">  // store the text <span class="keyword">in</span> the session</div><div class="line">  // req.getSession().setAttribute(this.sessionKeyValue, capText);</div><div class="line">  req.getSession().setAttribute(this.sessionKeyValue,</div><div class="line">      String.valueOf(result));</div><div class="line"></div><div class="line">  <span class="keyword">...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>之后修改web.xml 文件中配置的Servlet 类，将其改为我们自己实现的KaptchaServlet，并将我们之前的包含汉字和英文字母的文本生成类相关的配置注释掉，使用的字符集也改为只包含数字，因为这里只涉及到了个位数的加法，所以使用的字符个数改为2 个</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>Kaptcha<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span></div><div class="line">  com.zhang1g.test.kaptchaextend.KaptchaServlet</div><div class="line"><span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">&lt;!--文本实现类--&gt;</span></div><div class="line"><span class="comment">&lt;!-- </span></div><div class="line">&lt;init-param&gt;</div><div class="line">    &lt;param-name&gt;kaptcha.textproducer.impl&lt;/param-name&gt;</div><div class="line">    &lt;param-value&gt;</div><div class="line">      com.zhang1g.test.kaptchaextend.ChinesetTextCreator</div><div class="line">  &lt;/param-value&gt;</div><div class="line">&lt;/init-param&gt;   </div><div class="line">--&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 使用哪些字符生成验证码 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>kaptcha.textproducer.char.string<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>0123456789<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 字符个数 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">param-name</span>&gt;</span>kaptcha.textproducer.char.length<span class="tag">&lt;/<span class="title">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">param-value</span>&gt;</span>2<span class="tag">&lt;/<span class="title">param-value</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">init-param</span>&gt;</span></div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>

<p>修改完毕之后重新启动服务器，刷新浏览器即可看到算式验证码的最终效果。</p>
<p><img src="http://zhang1g.qiniudn.com/verification-code-number1.PNG" alt="Kaptcha 组件生成算式验证码"></p>
<p><img src="http://zhang1g.qiniudn.com/verification-code-number2.PNG" alt="算式验证码校验结果"></p>
<p>至此，使用kaptcha 组件生成各类复杂验证码的工作就全部完成了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://zhang1g.qiniudn.com/kaptcha-verify-code1.gif" alt="使用开源组件生成验证码"></p>
<h2 id="开源组件简介">开源组件简介</h2>
<p>在<a href="http://zhangyigong.github.io/2015/01/16/verification-code-generated-by-java-servlet/" target="_blank" rel="external">漫谈验证码（一） 使用Servlet 生成验证码</a>一文中，我们介绍了使用Servlet 生成验证码的方法。但是生成的验证码图片比较简单，使用图像识别的方法还是很容易破解，因此我们在实际应用中希望能够生成比较复杂的验证码图片，比如汉字、算式等，并且添加一些干扰。</p>
<p>使用一些相关的开源组件可以很容易的实现上述功能。常见的开源组件包括Kaptcha、jCaptcha 和Simplecaptcha。</p>
]]>
    
    </summary>
    
      <category term="java" scheme="http://zhangyigong.github.com/tags/java/"/>
    
      <category term="web" scheme="http://zhangyigong.github.com/tags/web/"/>
    
      <category term="opensource" scheme="http://zhangyigong.github.com/tags/opensource/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[漫谈验证码（一） 使用Servlet 生成验证码]]></title>
    <link href="http://zhangyigong.github.com/2015/01/16/verification-code-generated-by-java-servlet/"/>
    <id>http://zhangyigong.github.com/2015/01/16/verification-code-generated-by-java-servlet/</id>
    <published>2015-01-15T16:45:07.000Z</published>
    <updated>2015-01-19T11:27:07.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://zhang1g.qiniudn.com/verification-code.png" alt="使用servlet 和开源组件生成验证码"></p>
<h2 id="为什么要使用验证码">为什么要使用验证码</h2>
<p>输入验证码是一个很麻烦的一个过程，很多用户都不喜欢，但是验证码却总是存在于各类的网站和Web 应用中，比如</p>
<ul>
<li>回复帖子的时候</li>
<li>申请账号的时候</li>
<li>用户登录的时候<br>…</li>
</ul>
<p>为什么要使用验证码呢？</p>
<a id="more"></a>

<p>因为计算机可以模拟人的行为对网站进行一系列的操作，如果不使用验证码，将会导致一些可怕的事情发生</p>
<ul>
<li>对特定用户不断登录破解密码</li>
<li>对某个网站不断创建无效账户</li>
<li>对某个网站提交垃圾数据</li>
<li>对网站投票进行刷票<br>…</li>
</ul>
<h2 id="什么是验证码">什么是验证码</h2>
<p>有验证码的登录过程如下</p>
<p><img src="http://zhang1g.qiniudn.com/verification-code2.png" alt="有验证码的登录过程"></p>
<p>那么，我们使用验证码只有一个原因，就是通过验证码，由用户肉眼识别其中的验证信息，从而区分用户是人还是计算机。</p>
<p>验证码定义：</p>
<blockquote>
<p>一种区分用户是人还是计算机的公共全自动程序。</p>
</blockquote>
<h2 id="使用Servlet_生成验证码概述">使用Servlet 生成验证码概述</h2>
<p>我们知道，网页中的验证码包含两部分：</p>
<ol>
<li><p>输入框</p>
</li>
<li><p>显示验证码的图片</p>
</li>
</ol>
<p>那么验证码的图片是如何获取的？</p>
<p>我们没有必要事先准备大量的验证码图片，可以使用Servlet 在初次显示验证码或者刷新验证码时实时生成。下面是一个包含验证码的网页源码的一部分</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;input type=<span class="string">"text"</span> id=<span class="string">"verifyCode"</span> name=<span class="string">"verifyCode"</span> size=<span class="string">"6"</span>/&gt;</div><div class="line"><span class="keyword">...</span></div><div class="line">&lt;img alt=<span class="string">"验证码"</span> id=<span class="string">"safecode"</span> src=<span class="string">"&lt;%=request.getContextPath()%&gt;/</span></div><div class="line">		servlet/ImageServlet"/&gt;</div><div class="line"><span class="keyword">...</span></div></pre></td></tr></table></figure>

<p>整个过程中需要两个自定义类，其中<strong>ImageServlet</strong> 用来生成验证码，<strong>LogionServlet</strong> 用来校验验证码是否正确。</p>
<p><strong>ImageServlet 类</strong></p>
<p>使用ImageServlet 生成图片需要用到的类包括</p>
<ul>
<li>BufferedImage 图像数据缓冲区</li>
<li>Graphics 绘制图片</li>
<li>Color 获取颜色</li>
<li>Random 生成随机数</li>
<li>ImageIO 输出图片</li>
</ul>
<p>生成验证码的类ImageServlet 的具体实现流程如下</p>
<ol>
<li><p>定义BufferedImage 对象</p>
</li>
<li><p>获得Graphics 对象</p>
</li>
<li><p>通过Random 产生随机验证码信息</p>
</li>
<li><p>使用Graphics 类绘制图片</p>
</li>
<li><p>记录验证码信息到session 中</p>
</li>
<li><p>使用ImageIO 输出图片</p>
</li>
</ol>
<p><strong>LoginServlet 类</strong></p>
<p>使用LoginServlet 校验验证码是否正确需要以下几个步骤</p>
<ol>
<li><p>获取页面上用户输入的验证码</p>
</li>
<li><p>获取session 保存的验证码</p>
</li>
<li><p>比较验证码</p>
</li>
<li><p>返回校验结果</p>
</li>
</ol>
<p>使用ImageServlet 和LoginServlet 实现验证码生成和校验的流程如下</p>
<p><img src="http://zhang1g.qiniudn.com/verification-code3.png" alt="实现验证码生成和校验的流程"></p>
<h2 id="使用servlet_生成验证码代码实现">使用servlet 生成验证码代码实现</h2>
<p><strong>新建Java Web 工程</strong></p>
<p>将新建的工程命名为<code>ServletVerificationCode</code>，在项目名称上点击右键属性，将工程的编码格式改为UTF-8。</p>
<p>在src 目录下新建一个名为 <code>com.zhang1g.test</code> 的包，在包下新建类 <code>ImageServlet</code> 和 <code>LoginServlet</code>，这两个类都继承HttpServlet 抽象类。</p>
<p>编辑WEB-INF 目录下的index.jsp 文件，pageEncoding 改为UTF-8，在body 中增加一个form 表单，其中包含一个img 标签用来显示验证码，一个文本输入框用来输入验证码以及一个提交按钮。具体代码如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;form <span class="variable">action=</span><span class="string">"&lt;%=request.getContextPath()%&gt;/servlet/LoginServlet"</span> </div><div class="line">		<span class="variable">method=</span><span class="string">"post"</span>&gt;</div><div class="line">	&lt;br&gt; </div><div class="line">	&lt;img <span class="variable">alt=</span><span class="string">"验证码"</span> <span class="variable">id=</span><span class="string">"index_image_verify_code"</span></div><div class="line">		<span class="variable">src=</span><span class="string">"&lt;%=request.getContextPath()%&gt;/servlet/ImageServlet"</span>&gt; </div><div class="line">	&lt;br&gt;</div><div class="line">	&lt;input <span class="variable">type=</span><span class="string">"text"</span> <span class="variable">name=</span><span class="string">"index_userinput_verifycode"</span></div><div class="line">		<span class="variable">id=</span><span class="string">"index_userinput_verifycode"</span> <span class="variable">size=</span><span class="string">"6"</span> /&gt; </div><div class="line">	&lt;a <span class="variable">href=</span><span class="string">"#"</span>&gt;看不清楚&lt;/a&gt; </div><div class="line">	&lt;br&gt; &lt;br&gt; </div><div class="line">	&lt;input <span class="variable">type=</span><span class="string">"submit"</span> <span class="variable">value=</span><span class="string">"提交"</span>&gt;</div><div class="line">&lt;/form&gt;</div></pre></td></tr></table></figure>

<p>其中 <code>&lt;%=request.getContextPath()%&gt;</code> 表示项目工程的路径，form 表单的action 和img 的src 属性向后台的Servlet 请求数据，一个是post 请求，一个是get 请求，分别对应两个Servlet实现类：LoginServlet 和ImageServlet。</p>
<p><strong>在web.xml 中配置Servlet</strong></p>
<p>web.xml 在WEB-INF 的lib 目录下，针对上述两个Servlet进行配置，分别添加 <code>&lt;servlet&gt;&lt;/servlet&gt;</code> 和 <code>&lt;servlet-mapping&gt;&lt;/servlet-mapping&gt;</code> 项。具体配置如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>ImageServlet<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>com.zhang1g.test.ImageServlet<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span> </div><div class="line"><span class="tag">&lt;<span class="title">servlet</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">servlet-class</span>&gt;</span>com.zhang1g.test.LoginServlet<span class="tag">&lt;/<span class="title">servlet-class</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">servlet</span>&gt;</span> </div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>ImageServlet<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/servlet/ImageServlet<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">servlet-mapping</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">servlet-name</span>&gt;</span>LoginServlet<span class="tag">&lt;/<span class="title">servlet-name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="title">url-pattern</span>&gt;</span>/servlet/LoginServlet<span class="tag">&lt;/<span class="title">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>

<p><strong>ImageServlet 具体实现</strong></p>
<p>在类中自定义实现父类的doGet 方法，将生成的验证码放入session 中，并绘制验证码图片添加到response 输出流中。具体代码如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class ImageServlet extends HttpServlet {</div><div class="line"></div><div class="line">	@Override</div><div class="line">	protected void doGet(HttpServletRequest req, HttpServletResponse resp)</div><div class="line">			throws ServletException, IOException {</div><div class="line">		BufferedImage bufferedVerifyCodeImage = new BufferedImage(</div><div class="line">			75, 22, BufferedImage.TYPE_INT_RGB);</div><div class="line">		Graphics graphics = bufferedVerifyCodeImage.getGraphics();</div><div class="line">		</div><div class="line">		Color backgroundColor = new Color(200,150,255);</div><div class="line">		graphics.setColor(backgroundColor);</div><div class="line">		graphics.fillRect(0, 0, 75, 22);</div><div class="line">		</div><div class="line">		char[] verifyCodeCollection = </div><div class="line">			<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>.toCharArray();</div><div class="line">		Random random = new Random();</div><div class="line">		int len = verifyCodeCollection.length;</div><div class="line">		StringBuffer sb = new StringBuffer();</div><div class="line">		for (int i = 0; i &lt;4 ; i++) {</div><div class="line">			int index = random.nextInt(len);</div><div class="line">			graphics.setColor(new Color(random.nextInt(88),</div><div class="line">				random.nextInt(188),random.nextInt(255)));</div><div class="line">			graphics.drawString(verifyCodeCollection[index]+<span class="string">""</span>, </div><div class="line">				(i*15)+3, 18);</div><div class="line">			</div><div class="line">			sb.append(verifyCodeCollection[index]);</div><div class="line">		}</div><div class="line">		</div><div class="line">		req.getSession().setAttribute(<span class="string">"picVerifyCode"</span>, </div><div class="line">			sb.toString());</div><div class="line">		ImageIO.write(bufferedVerifyCodeImage, <span class="string">"JPG"</span>, </div><div class="line">			resp.getOutputStream());</div><div class="line">	}</div><div class="line">	</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>LoginServlet 具体实现</strong></p>
<p>在类中通过request 获取用户输入的验证码信息，并与session 中的验证码进行比较，如果一致则跳转到success 页面，如果不一致则跳转到fail 页面。具体实现如下</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>{</div><div class="line"></div><div class="line">	<span class="annotation">@Override</span></div><div class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span>(HttpServletRequest req, HttpServletResponse resp)</div><div class="line">			<span class="keyword">throws</span> ServletException, IOException {		</div><div class="line">		String picVerifyCode = </div><div class="line">			(String)req.getSession().getAttribute(<span class="string">"picVerifyCode"</span>);</div><div class="line">		String userInputVerifyCode = </div><div class="line">			req.getParameter(<span class="string">"index_userinput_verifycode"</span>);</div><div class="line">			</div><div class="line">		<span class="keyword">if</span> (userInputVerifyCode.toUpperCase().equals(picVerifyCode)) {</div><div class="line">			RequestDispatcher view = </div><div class="line">				req.getRequestDispatcher(<span class="string">"/success.jsp"</span>);</div><div class="line">			view.forward(req, resp);</div><div class="line">		} <span class="keyword">else</span> {</div><div class="line">			RequestDispatcher view = </div><div class="line">				req.getRequestDispatcher(<span class="string">"/fail.jsp"</span>);</div><div class="line">			view.forward(req, resp);</div><div class="line">		}</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>编辑验证成功和失败页面</strong></p>
<p>在WEB-INFO 下新建success.jsp 和fail.jsp 两个页面，pageEncoding 改为UTF-8，这两个页面的内容基本一致。</p>
<p>由于页面中用到了JSTL 表达式和EL 表达式，因此需要在项目中添加JSTL 支持，即在项目的WEB-INFO/lib 目录下添加jstl.jar 和standard.jar（可以从tomcat 的示例代码中copy），并在JSP 页面中包含语句 <code>&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</code> 。</p>
<p><code>success.jsp</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt; </div><div class="line">...</div><div class="line"></div><div class="line">  &lt;head&gt;</div><div class="line">    &lt;title&gt;check <span class="literal">result</span>&lt;/title&gt;</div><div class="line">  &lt;/head&gt;</div><div class="line">  </div><div class="line">  &lt;body&gt;</div><div class="line">  	&lt;c:<span class="keyword">out</span> value=<span class="string">"图片上的验证码信息为：${sessionScope.picVerifyCode}"</span> </div><div class="line">  		default=<span class="string">""</span> /&gt;</div><div class="line">  	&lt;br&gt;</div><div class="line">  	&lt;c:<span class="keyword">out</span> value=<span class="string">"输入的验证码信息为：${param.index_userinput_verifycode}"</span> </div><div class="line">  		default=<span class="string">""</span> /&gt;</div><div class="line">  	&lt;br&gt;&lt;br&gt;</div><div class="line">  	验证码输入正确！</div><div class="line">  &lt;/body&gt;</div></pre></td></tr></table></figure>

<p><code>fail.jsp</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="vbscript">&lt;%@ taglib uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span> %&gt;</span> </div><div class="line">...</div><div class="line">  <span class="tag">&lt;<span class="title">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="title">title</span>&gt;</span>验证码校验结果<span class="tag">&lt;/<span class="title">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="title">head</span>&gt;</span></div><div class="line">  </div><div class="line">  <span class="tag">&lt;<span class="title">body</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="title">c:out</span> <span class="attribute">value</span>=<span class="value">"图片上的验证码信息为：${sessionScope.picVerifyCode}"</span> </span></div><div class="line">  		<span class="attribute">default</span>=<span class="value">""</span> /&gt;</div><div class="line">  	<span class="tag">&lt;<span class="title">br</span>&gt;</span></div><div class="line">  	<span class="tag">&lt;<span class="title">c:out</span> <span class="attribute">value</span>=<span class="value">"输入的验证码信息为：${param.index_userinput_verifycode}"</span> </span></div><div class="line">  		<span class="attribute">default</span>=<span class="value">""</span> /&gt;</div><div class="line">  	<span class="tag">&lt;<span class="title">br</span>&gt;</span><span class="tag">&lt;<span class="title">br</span>&gt;</span></div><div class="line">  	验证码输入错误！</div><div class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></div></pre></td></tr></table></figure>

<p><strong>添加刷新验证码功能</strong></p>
<p>在首页index.jsp 中，为了防止显示的验证码不是很清楚，添加了 <code>看不清楚</code> 超链接，重新向后台的ImageServlet 发出请求，显示新的验证码图片。</p>
<p>更改 <code>&lt;a href=&quot;#&quot;&gt;看不清楚&lt;/a&gt;</code> 为</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"javascript:reloadVerifyCode()"</span>&gt;</span>看不清楚<span class="tag">&lt;/<span class="title">a</span>&gt;</span></div></pre></td></tr></table></figure>

<p>在<head></head> 中添加重新加载验证码图片的js 代码，并实现reloadVerifyCode 方法</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">reloadVerifyCode</span><span class="params">()</span> </span>{</div><div class="line">		<span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</div><div class="line">		<span class="built_in">document</span>.getElementById(<span class="string">"index_image_verify_code"</span>).src = </div><div class="line">			<span class="string">"&lt;%=request.getContextPath()%&gt;/servlet/ImageServlet?d="</span></div><div class="line">			 + time;</div><div class="line">	}</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<p>其中的src 除了ImageServlet 对应的URL 链接外，另外添加了time 变量，用来解决由于浏览器缓存导致的验证码图片无法刷新的问题。</p>
<p><strong>在Tomcat 中运行项目工程</strong></p>
<p>在eclipse 中配置好Tomcat 服务器，并将项目运行在配置好的Tomcat 中，打开浏览器，输入 <code>http://localhost:8080/ServletVerificationCode/</code> 即可在浏览其中看到如下效果</p>
<p><img src="http://zhang1g.qiniudn.com/servlet-verifycode1.PNG" alt="Servlet 生成验证码效果"></p>
<p>输入正确的验证码后，点击提交按钮，可以看到</p>
<p><img src="http://zhang1g.qiniudn.com/servlet-verifycode-success.PNG" alt="Servlet 生成验证码效果"></p>
<p>至此使用Servlet 生成验证码的工作就全部完成了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://zhang1g.qiniudn.com/verification-code.png" alt="使用servlet 和开源组件生成验证码"></p>
<h2 id="为什么要使用验证码">为什么要使用验证码</h2>
<p>输入验证码是一个很麻烦的一个过程，很多用户都不喜欢，但是验证码却总是存在于各类的网站和Web 应用中，比如</p>
<ul>
<li>回复帖子的时候</li>
<li>申请账号的时候</li>
<li>用户登录的时候<br>…</li>
</ul>
<p>为什么要使用验证码呢？</p>
]]>
    
    </summary>
    
      <category term="java" scheme="http://zhangyigong.github.com/tags/java/"/>
    
      <category term="web" scheme="http://zhangyigong.github.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Github Pages 和Hexo 搭建独立博客]]></title>
    <link href="http://zhangyigong.github.com/2015/01/13/bulid-blog-with-githubpages-and-hexo/"/>
    <id>http://zhangyigong.github.com/2015/01/13/bulid-blog-with-githubpages-and-hexo/</id>
    <published>2015-01-13T14:27:57.000Z</published>
    <updated>2015-01-14T09:30:44.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://zhang1g.qiniudn.com/blog1.jpg" alt="使用Github Pages 和Hexo 搭建独立博客"></p>
<h2 id="前言">前言</h2>
<p>一直想搭建一个自己的独立博客，后来发现了Hexo 这个逼格极高的方式，而且比起Github Pages 官方推荐的Jekyll 操作要简便的多，因此就使用Github Pages 服务和Hexo 搭建了现在这个博客。</p>
<p>这是一个在Win7 搭建独立博客的教程，我希望尽可能写的详细，给后来者一个指引。在搭建博客的过程中我摘录了其他人的一些教程，感谢这些作者们，在教程的最后我也会列出相关的链接。</p>
<p>下面开始我们的博客搭建之旅。</p>
<a id="more"></a>

<h2 id="为什么选择GitHub_Pages？">为什么选择GitHub Pages？</h2>
<p>很多人选择Wordpress 来搭建博客，但是相对会麻烦一点，<a href="https://pages.github.com/" target="_blank" rel="external">Github Pages</a> 可以被认为是用户编写的、托管在github上的静态网页，它是Github 推出的一项服务，本来是用于介绍托管在GitHub 的项目，不过，由于它的空间免费稳定，用来做搭建一个博客再好不过了。</p>
<p>GitHub Pages 拥有两种Pages 模式</p>
<ul>
<li>User/Organization Pages 个人或公司站点</li>
<li>Project Pages 项目站点</li>
</ul>
<p>我们使用第一种模式，但是需要注意以下几点</p>
<ol>
<li><p>使用自己的Github 用户名，每个用户名下面只能建立一个</p>
</li>
<li><p>资源命名必须符合这样的规则 <code>username/username.github.com</code></p>
</li>
<li><p>主干上内容被用来构建和发布页面</p>
</li>
</ol>
<p>使用Github Pages 可以</p>
<ol>
<li><p>享有300M 免费空间，资料自己管理，保存可靠</p>
</li>
<li><p>支持静态脚本</p>
</li>
<li><p>本身提供有Github 的二级域名，也可以绑定自己申请的域名</p>
</li>
<li><p>可以使用Jekyll、Octopress、Hexo 等工具对博客进行DIY</p>
</li>
</ol>
<h2 id="什么是Hexo?">什么是Hexo?</h2>
<p>hexo出自台湾大学生<a href="http://zespia.tw/" target="_blank" rel="external">tommy351</a> 之手，是一个基于Node.js 的静态博客程序，其编译上百篇文字只需要几秒。Hexo 生成的静态网页可以直接放到GitHub Pages，BAE，SAE 等平台上。</p>
<p>作者在<a href="http://zespia.tw/blog/2012/10/11/hexo-debut/" target="_blank" rel="external">Hexo 颯爽登場！</a>一文中吐槽了一下Octopress，并简单介绍了Hexo 的使用。相比Octopress 或者Jekyll 等静态网页生成器，Hexo 不仅生成网页的速度更快，而且操作命令也极其简单。</p>
<p>虽然在搭建过程或许会觉得有点小繁琐，但一旦博客搭建完成，写文章是极简单，极舒服的。只需要几个简单命令，就可以完成一切。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>hexo n title <span class="comment">#写文章</span></div><div class="line"><span class="variable">$ </span>hexo g 	<span class="comment">#生成</span></div><div class="line"><span class="variable">$ </span>hexo d 	<span class="comment">#部署 # 可与hexo g合并为 hexo d -g</span></div></pre></td></tr></table></figure>

<h2 id="Node-js_安装">Node.js 安装</h2>
<p><strong>安装包下载</strong> </p>
<p>到<a href="http://nodejs.org/" target="_blank" rel="external">Node.js 官网</a>下载最新版本的安装包，一路安装即可。</p>
<p><img src="http://zhang1g.qiniudn.com/nodejs-install.PNG" alt="Node.js 官网安装包下载"></p>
<p><strong>设置环境变量</strong></p>
<p><code>我的电脑</code> 右键 <code>属性</code> 找到 <code>高级系统设置</code> <code>高级</code> <code>环境变量</code>，在系统变量Path 后添加对应的安装目录，比如 <code>C:\Program Files\nodejs\;</code>。</p>
<p>配置成功后在cmd 中通过 <code>node --version</code> 来查看Node.js 对应的版本号。</p>
<p><strong>安装模块管理工具npm</strong></p>
<p>下载<a href="https://github.com/npm/npm/tags" target="_blank" rel="external">nmp 源码</a>，将npm 源代码解压到D:\npmjs 目录中。</p>
<p>在命令提示符窗口中执行下面的操作，完成npm 的安装：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span><span class="constant">D</span><span class="symbol">:</span>\&gt;cd npmjs</div><div class="line"><span class="variable">$ </span><span class="constant">D</span><span class="symbol">:</span>\npmjs&gt;node cli.js install -gf</div></pre></td></tr></table></figure>

<p>npm 安装完成后，将 <code>D:\nodejs\node_modules</code> 加入系统环境变量Path 中。</p>
<h2 id="Git_安装和Github_设置">Git 安装和Github 设置</h2>
<p><strong>安装Git 客户端</strong></p>
<p>Git的客户端很多，我用的是<a href="http://code.google.com/p/msysgit" target="_blank" rel="external">msysgit</a>，可以在百度云中搜索并下载绿色版，安装后设置环境变量。</p>
<p>我们会用到msysgit 的Git Bash 工具。</p>
<p><strong>Github 设置</strong></p>
<ol>
<li><p>注册一个GitHub 帐号，已有的请忽略。</p>
</li>
<li><p>建立与用户名对应的仓库，仓库名必须为 <code>your_user_name.github.com</code>。</p>
</li>
<li><p>添加SSH Key到Github。 </p>
</li>
</ol>
<p>下面具体说一下如何添加SSH Key。</p>
<ul>
<li>打开Git Bash，检查电脑上现有的ssh key</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> ~/.ssh</div></pre></td></tr></table></figure>

<p>如果提示：<code>No such file or directory</code> 说明是第一次使用Git。</p>
<ul>
<li>生成密钥</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C <span class="string">"name@163.com"</span></div><div class="line">Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa <span class="keyword">key</span> pair.</div><div class="line">Enter file <span class="keyword">in</span> which <span class="keyword">to</span> save the <span class="keyword">key</span> (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</div></pre></td></tr></table></figure>

<p>然后系统会要你输入密码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="constant">Enter</span> passphrase (empty <span class="keyword">for</span> no passphrase)<span class="symbol">:&lt;</span>输入加密串&gt;</div><div class="line"><span class="constant">Enter</span> same passphrase <span class="symbol">again:</span>&lt;再次输入加密串&gt;</div></pre></td></tr></table></figure>

<p>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。</p>
<p>设置成功后会出现如下所示的界面。</p>
<p><img src="http://zhang1g.qiniudn.com/SSH-set-success.png" alt="SSH Key 设置成功"></p>
<ul>
<li>添加SSH Key 到Github</li>
</ul>
<p>打开本地 <code>C:\Documents and Settings\Administrator.ssh\id_rsa.pub</code> 文件。此文件里面内容为刚才生成人密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。</p>
<p>登陆Github，点击右上角的 <code>Account settings</code> -&gt; <code>SSH Keys</code> -&gt; <code>Add SSH Key</code>。</p>
<p>把本地生成的密钥复制到里面（key文本框中）， 点击add key 就可以了。</p>
<p><img src="http://zhang1g.qiniudn.com/github-SSH.PNG" alt="Github 添加SSH Key"></p>
<ul>
<li>测试SSH Key 是否设置成功</li>
</ul>
<p>输入下面的命令，可以测试设置是否成功，<code>git@github.com</code> 的部分不要修改</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>ssh -<span class="constant">T</span> git<span class="variable">@github</span>.com</div></pre></td></tr></table></figure>

<p>如果是下面的反馈</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The authenticity <span class="keyword">of</span> host <span class="comment">'github.com (207.97.227.239)' can't be established.</span></div><div class="line">RSA <span class="keyword">key</span> fingerprint <span class="keyword">is</span> <span class="number">16</span>:<span class="number">27</span>:ac:a5:<span class="number">76</span>:<span class="number">28</span>:<span class="number">2</span>d:<span class="number">36</span>:<span class="number">63</span>:<span class="number">1</span>b:<span class="number">56</span>:<span class="number">4</span>d:eb:df:a6:<span class="number">48.</span></div><div class="line">Are you sure you want <span class="keyword">to</span> <span class="keyword">continue</span> connecting (yes/no)?</div></pre></td></tr></table></figure>

<p>不要紧张，输入yes 后会看到</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hi xxx! You<span class="attribute">'ve</span> successfully authenticated, but GitHub does <span class="keyword">not</span> provide shell <span class="keyword">access</span>.</div></pre></td></tr></table></figure>

<ul>
<li>设置用户名和密码</li>
</ul>
<p>现在已经可以通过SSH 连接到GitHub 了，还有一些个人信息需要完善的。<br>Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global <span class="literal">user</span>.email <span class="string">"name@163.com"</span></div><div class="line">$ git config --global <span class="literal">user</span>.name <span class="string">"name"</span></div></pre></td></tr></table></figure>

<h2 id="Hexo_安装">Hexo 安装</h2>
<p>Node.js 和Git 都安装好后，可执行如下命令安装Hexo</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install -g hexo</div></pre></td></tr></table></figure>

<p>安装完成后可以参考<a href="http://hexo.io/docs/index.html" target="_blank" rel="external">Hexo 的官方文档</a>获取详细的使用说明。这里只是简单介绍一下Hexo 的使用。</p>
<p>在我的电脑中建立一个名字叫HexoBlog 的文件夹，然后在此文件夹中右键打开Git Bash。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>hexo init</div></pre></td></tr></table></figure>

<p>Hexo 随后会自动在目标文件夹建立网站所需要的所有文件。</p>
<p>现在我们已经搭建起本地的Hexo 博客了，在HexoBlog 文件夹下执行以下命令，然后到浏览器输入 <code>localhost:4000</code> 即可看到搭建的博客。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>hexo g</div><div class="line"><span class="variable">$ </span>hexo s <span class="comment">#本地启动</span></div></pre></td></tr></table></figure>

<p>命令必须在init目录（HexoBlog 文件夹）下执行，否则不成功，但是也不报错。<br>当你修改文章Tag 或内容，不能正确重新生成内容，可以删除 <code>HexoBlog\db.json</code> 后重试，还不行就到 <code>public</code> 目录删除对应的文件，重新生成。</p>
<h2 id="修改博客的主题">修改博客的主题</h2>
<p>Hexo 提供了很多主题，可以参考<a href="http://github.com/tommy351/hexo/wiki/Themes" target="_blank" rel="external">Hexo 的主题列表</a>选择自己喜欢的主题。</p>
<p>我比较喜欢的有Jacman 和 Yilia，Jacman提供的功能比较齐全，而Yilia 看起来则很优雅大方。</p>
<p>我的博客选取的是<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">Yilia 主题</a>。</p>
<p><strong>安装主题</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/litten</span><span class="regexp">/hexo-theme-yilia.git themes/yilia</span></div></pre></td></tr></table></figure>

<p>安装完成后，打开 <code>HexoBlog\_config.yml</code> ，修改主题为 <code>yilia</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">theme</span>: <span class="string">yilia</span></div></pre></td></tr></table></figure>

<p><strong>更新主题</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>cd themes/yilia</div><div class="line"><span class="variable">$ </span>git pull</div></pre></td></tr></table></figure>

<p>yilia 主题下 <code>_congif.yml</code> 文件的配置可以参考文章<a href="http://litten.github.io/2014/08/31/hexo-theme-yilia/" target="_blank" rel="external">Hexo主题Yilia</a>。</p>
<p>修改主文件下的 <code>_congif.yml</code>，修改的内容包括</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Site</span></div><div class="line">title: xxx的Blog</div><div class="line">subtitle: xxx xxx</div><div class="line"></div><div class="line">description: xxx xxx</div><div class="line">author: xxx</div><div class="line">email: name@<span class="number">163.</span>com</div><div class="line">language: </div><div class="line"></div><div class="line"><span class="keyword">...</span></div><div class="line"></div><div class="line">url: http://username.github.com</div><div class="line"></div><div class="line"><span class="keyword">...</span></div><div class="line"></div><div class="line">archive: <span class="number">1</span></div><div class="line">category: <span class="number">1</span></div><div class="line">tag: <span class="number">1</span></div><div class="line"></div><div class="line"><span class="keyword">...</span></div><div class="line"></div><div class="line">date_format: MMM DD </div><div class="line"></div><div class="line"><span class="keyword">...</span></div><div class="line"></div><div class="line">theme: yilia</div><div class="line">exclude_generator:</div><div class="line">plugins:</div><div class="line">- hexo-generator-feed</div><div class="line"></div><div class="line"><span class="comment"># Stylus</span></div><div class="line">stylus:</div><div class="line">  compress: true</div><div class="line"></div><div class="line"><span class="keyword">...</span></div><div class="line"></div><div class="line">deploy:</div><div class="line">  type: github</div><div class="line">  repository: https://github.com/username/username.github.com.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>

<p><strong>安装RSS 订阅插件</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>npm install hexo-generator-feed</div></pre></td></tr></table></figure>

<p><strong>添加多说评论</strong></p>
<p>静态博客要使用第三方评论系统，Hexo 默认集成的是Disqus ，在国内的话还是建议用<a href="http://duoshuo.com/" target="_blank" rel="external">多说</a> 。 </p>
<p>登陆之后进入后台管理并添加站点，进行基本设置并保存。</p>
<p><img src="http://zhang1g.qiniudn.com/duoshuo-set.PNG" alt="多说后台管理设置"></p>
<p>之后获取通用代码</p>
<p><img src="http://zhang1g.qiniudn.com/duoshuo-tongyongcode.PNG" alt="获取多说的通用代码"></p>
<p>在 <code>HexoBlog/themes/yilia/layout/_partial</code> 文件夹下找到 <code>duoshuo.ejs</code> 文件,该文件已经添加了相关的通用代码，我们只需要查看通用代码中的shortname，并将其添加到主题yilia 下的 <code>_config.yml</code> 文件中的相应位置即可。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">duoshuo</span>: <span class="string">shortname</span></div></pre></td></tr></table></figure>

<h2 id="发表文章">发表文章</h2>
<p><strong>Hexo 命令</strong></p>
<p>用hexo发表新文章，使用如下命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>hexo n title <span class="comment">#写文章</span></div></pre></td></tr></table></figure>

<p>其中title 为文章标题，执行命令后，会在项目\source_posts中生成title.md文件，用编辑器打开编写即可。<br>当然，也可以直接在\source_posts中新建一个md文件。</p>
<p>写完后，推送到服务器上，执行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>hexo g <span class="comment">#生成</span></div><div class="line"><span class="variable">$ </span>hexo d <span class="comment">#部署 # 可与hexo g合并为 hexo d -g</span></div></pre></td></tr></table></figure>

<p><strong>用Hexo 发表文章的Markdown 语法</strong></p>
<p>使用主题yilia，建议按照下面的标准语法写</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">title: postName #文章页面上的显示名称，可以任意修改</div><div class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</div><div class="line">tags: #文章标签，可空，多标签请用格式，注意:后面有个空格</div><div class="line"><span class="bullet">- </span>tag1</div><div class="line"><span class="header">- tag2 </span></div><div class="line">---</div><div class="line"></div><div class="line">摘要</div><div class="line">&lt;!--more--&gt;</div><div class="line">以下正文</div></pre></td></tr></table></figure>

<p>关于正文撰写的相关Markdown 语法可以参考文章<a href="http://zhangyigong.github.io/2015/01/13/markdown-grammar/" target="_blank" rel="external">使用Markdown 语法编辑博客内容</a>。</p>
<p><strong>支持Markdown 语法的编辑器</strong></p>
<p>这里我推荐Sublime，<a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text 2</a>在这里仅仅作为一个文本编辑器使用，支持各种编程语言和文件格式，也支持Markdown语法，是个不可多得的练码奇才。</p>
<p>下载好Sublime Text 2后无需安装即可直接使用，使用教程可以参考</p>
<ul>
<li><a href="http://www.jianshu.com/p/378338f10263" target="_blank" rel="external">sublime text 2 下的Markdown写作</a></li>
<li><a href="http://lucifr.com/2011/08/31/sublime-text-2-tricks-and-tips/" target="_blank" rel="external">Sublime Text 2 入门及技巧</a></li>
</ul>
<p>在发布文章时如果出现乱码，需要用Sublime Text 将md 文件的编码格式改为UTF-8。</p>
<p><strong>支持编辑数学公式</strong></p>
<p>虽不是经常跟数学公式打交道，但一旦需要让网页上出现数学公式只能截图，再插入到文章中，想想都觉得麻烦，在网上搜到一种很好的方法来解决这个问题。</p>
<p>这种工具就是mathjax，它能很好的在所有的浏览器中很好的显示数学公式，而且用起来很方便．只需要在页面中加入一段javascript 的引用代码即可。</p>
<ul>
<li>新建ejs</li>
</ul>
<p>在 <code>yilia\layout\_partial\</code> 下面新建 <code>mathjax.ejs</code> 文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/x-mathjax-config"</span>&gt;</span><span class="javascript"></span></div><div class="line">  MathJax.Hub.Config({</div><div class="line">    tex2jax: {</div><div class="line">      inlineMath: [ [<span class="string">'$'</span>,<span class="string">'$'</span>], [<span class="string">"\\("</span>,<span class="string">"\\)"</span>] ],</div><div class="line">      processEscapes: <span class="literal">true</span></div><div class="line">    }</div><div class="line">  });</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/x-mathjax-config"</span>&gt;</span><span class="javascript"></span></div><div class="line">    MathJax.Hub.Config({</div><div class="line">      tex2jax: {</div><div class="line">        skipTags: [<span class="string">'script'</span>, <span class="string">'noscript'</span>, <span class="string">'style'</span>, <span class="string">'textarea'</span>, <span class="string">'pre'</span>, <span class="string">'code'</span>]</div><div class="line">      }</div><div class="line">    });</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/x-mathjax-config"</span>&gt;</span><span class="javascript"></span></div><div class="line">    MathJax.Hub.Queue(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">        <span class="keyword">var</span> all = MathJax.Hub.getAllJax(), i;</div><div class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i &lt; all.length; i += <span class="number">1</span>) {</div><div class="line">            all[i].SourceElement().parentNode.className += <span class="string">' has-jax'</span>;</div><div class="line">        }</div><div class="line">    });</div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></div></pre></td></tr></table></figure>

<ul>
<li>页面引入</li>
</ul>
<p>同样也在 <code>yilia\layout\_partial\</code> 这个目录下面的 <code>after_foot.ejs</code> 中引入新建的文件 <code>mathjax.ejs</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="variable">%-</span> partial(<span class="string">'mathjax'</span>) <span class="variable">%&gt;</span></div></pre></td></tr></table></figure>

<hr>
<p>至此，博客搭建的过程就全部完成了。</p>
<p>如果不喜欢Github 提供的二级域名，也可以在Godaddy 上申请适合自己的域名，之后用DNSpod 进行域名绑定即可，关于这部分内容在之后的博客中会和大家一起分享。</p>
<h2 id="参考文献">参考文献</h2>
<ol>
<li><p><a href="http://cnfeat.com/2014/05/10/2014-05-11-how-to-build-a-blog/" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></p>
</li>
<li><p><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo你的博客</a></p>
</li>
<li><p><a href="http://wsgzao.github.io/post/hexo-guide/" target="_blank" rel="external">使用GitHub和Hexo搭建免费静态Blog</a></p>
</li>
<li><p><a href="http://blog.yidongzhifu.net/2014/06/04/hexo%E4%B8%BB%E9%A2%98%E6%94%AF%E6%8C%81%E7%BC%96%E8%BE%91%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/" target="_blank" rel="external">hexo博客支持编辑数学公式</a></p>
</li>
<li><p><a href="http://jianyan.me/2014/06/21/how-to-build-a-free-static-blog-hexo-and-github-notes/" target="_blank" rel="external">如何搭建免费静态博客——Hexo 与 GitHub 使用小记</a></p>
</li>
<li><p><a href="http://www.leejianyang.com/2014/05/25/duoshuo_tutorial/" target="_blank" rel="external">Hexo添加多说评论框指南</a></p>
</li>
<li><p><a href="http://jingyan.baidu.com/article/6c67b1d68ed4bc2787bb1e83.html" target="_blank" rel="external">hexo github pages 首页不展示，出现代码怎么办</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2012/08/blogging_with_jekyll.html" target="_blank" rel="external">搭建一个免费的，无限流量的Blog——github Pages和Jekyll入门</a></p>
</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://zhang1g.qiniudn.com/blog1.jpg" alt="使用Github Pages 和Hexo 搭建独立博客"></p>
<h2 id="前言">前言</h2>
<p>一直想搭建一个自己的独立博客，后来发现了Hexo 这个逼格极高的方式，而且比起Github Pages 官方推荐的Jekyll 操作要简便的多，因此就使用Github Pages 服务和Hexo 搭建了现在这个博客。</p>
<p>这是一个在Win7 搭建独立博客的教程，我希望尽可能写的详细，给后来者一个指引。在搭建博客的过程中我摘录了其他人的一些教程，感谢这些作者们，在教程的最后我也会列出相关的链接。</p>
<p>下面开始我们的博客搭建之旅。</p>
]]>
    
    </summary>
    
      <category term="blog" scheme="http://zhangyigong.github.com/tags/blog/"/>
    
      <category term="hexo" scheme="http://zhangyigong.github.com/tags/hexo/"/>
    
      <category term="github" scheme="http://zhangyigong.github.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Markdown 语法编辑博客内容]]></title>
    <link href="http://zhangyigong.github.com/2015/01/13/markdown-grammar/"/>
    <id>http://zhangyigong.github.com/2015/01/13/markdown-grammar/</id>
    <published>2015-01-13T11:26:16.000Z</published>
    <updated>2015-01-14T09:35:05.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://zhang1g.qiniudn.com/markdown-example4.jpg" alt="使用Markdown 语法编辑博客内容"></p>
<h2 id="什么是_Markdown">什么是 Markdown</h2>
<p>Markdown 是一种方便记忆、书写的纯文本标记语言，我们可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这篇博客。</p>
<p>不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。</p>
<p><strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
<a id="more"></a>

<p>可以使用Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记`</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<p>它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="书写一个复杂的公式">书写一个复杂的公式</h3>
<p>$$e^{\pi i}+1=?$$</p>
<h3 id="高亮一段代码">高亮一段代码</h3>
<p>比如下面是一段python 代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="decorator">@requires_authorization</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment"># A comment</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></div></pre></td></tr></table></figure>

<h3 id="绘制表格">绘制表格</h3>
<table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h2 id="Markdown_的语法规则">Markdown 的语法规则</h2>
<p>Markdown 语法简洁明了，易于掌握，所以用它来写作是件既效率又舒服的事情。我们所熟知的和一些大型CMS，如Joomla!、Drupal 等都能很好的支持Markdown。</p>
<p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应HTML  标记的一小部分。Markdown 的构想不是要使得HTML 文档更容易书写。在我看来， HTML 已经很容易写了。</p>
<p>Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。下面列出了一些简单语法，详细的语法可以参考<a href="http://www.ituring.com.cn/article/775" target="_blank" rel="external">图灵社区</a>或者<a href="http://wowubuntu.com/markdown/" target="_blank" rel="external">Markdown 语法说明 (简体中文版)</a></p>
<h3 id="1-_斜体和粗体">1. 斜体和粗体</h3>
<p>使用 <em> 和 *</em> 表示斜体和粗体。</p>
<p>示例：</p>
<p>这是 <em>斜体</em>，这是 <strong>粗体</strong>。</p>
<h3 id="2-_分级标题">2. 分级标题</h3>
<p>使用 === 表示一级标题，使用 —- 表示二级标题。</p>
<p>示例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="header">这是一个一级标题</span></div><div class="line">============================</div><div class="line"></div><div class="line"><span class="header">这是一个二级标题</span></div><div class="line">--------------------------------------------------</div><div class="line"></div><div class="line">### 这是一个三级标题</div></pre></td></tr></table></figure>

<p>你也可以选择在行首加井号表示不同级别的标题 (H1-H6)，例如：# H1, ## H2, ### H3，#### H4。</p>
<h3 id="3-_外链接">3. 外链接</h3>
<p>使用 [描述](链接地址) 为文字增加外链接。</p>
<p>示例：</p>
<p>这是去往 <a href="http://www.baidu.com" target="_blank" rel="external">百度</a> 的链接。</p>
<h3 id="4-_无序列表">4. 无序列表</h3>
<p>使用 *，+，- 表示无序列表。</p>
<p>示例：</p>
<ul>
<li>无序列表项 一</li>
<li>无序列表项 二</li>
<li>无序列表项 三</li>
</ul>
<h3 id="5-_有序列表">5. 有序列表</h3>
<p>使用数字和点表示有序列表。</p>
<p>示例：</p>
<ol>
<li>有序列表项 一</li>
<li>有序列表项 二</li>
<li>有序列表项 三</li>
</ol>
<h3 id="6-_文字引用">6. 文字引用</h3>
<p>使用 &gt; 表示文字引用。</p>
<p>示例：</p>
<blockquote>
<p>野火烧不尽，春风吹又生。</p>
</blockquote>
<h3 id="7-_行内代码块">7. 行内代码块</h3>
<p>使用 `代码` 表示行内代码块。</p>
<p>示例：</p>
<p>让我们聊聊 <code>html</code>。</p>
<h3 id="8-_代码块">8.  代码块</h3>
<p>使用 四个缩进空格 表示代码块。</p>
<p>示例：</p>
<pre><code>这是一个代码块，此行左侧有四个不可见的空格。
</code></pre><h3 id="9-_插入图像">9.  插入图像</h3>
<p>使用 ![描述](图片链接地址) 插入图像。图片的存储可以使用<a href="https://portal.qiniu.com" target="_blank" rel="external">七牛云存储</a>。</p>
<p>示例：</p>
<p><img src="http://zhang1g.qiniudn.com/shizi.jpg" alt="我的头像"></p>
<h3 id="10-_删除线">10. 删除线</h3>
<p>使用 ~~ 表示删除线。</p>
<p><del>这是一段错误的文本。</del></p>
<h3 id="11-_LaTeX_公式">11. LaTeX 公式</h3>
<p>$ 表示行内公式： </p>
<p>质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。</p>
<p>$$ 表示整行公式：</p>
<p>$$\sum_{i=1}^n a_i=0$$</p>
<p>$$f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 $$</p>
<p>访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax</a> 可以参考更多使用方法。</p>
<h3 id="13-_表格支持">13. 表格支持</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| 项目        | 价格   |  数量  |</div><div class="line">| --------   | -----<span class="symbol">:</span>  | <span class="symbol">:----</span><span class="symbol">:</span>  |</div><div class="line">| 计算机     | <span class="variable">$1600</span> |   <span class="number">5</span>     |</div><div class="line">| 手机        |   <span class="variable">$12</span>   |   <span class="number">12</span>   |</div><div class="line">| 管线        |    <span class="variable">$1</span>    |  <span class="number">234</span>  |</div></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="12-_代码块">12. 代码块</h3>
<p>支持多种种编程语言的语法高亮的显示，行号显示。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="decorator">@requires_authorization</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="string">'''A docstring'''</span></div><div class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></div><div class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="prompt">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></div><div class="line"><span class="prompt">... </span>prompt'''</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://zhang1g.qiniudn.com/markdown-example4.jpg" alt="使用Markdown 语法编辑博客内容"></p>
<h2 id="什么是_Markdown">什么是 Markdown</h2>
<p>Markdown 是一种方便记忆、书写的纯文本标记语言，我们可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这篇博客。</p>
<p>不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。</p>
<p><strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
]]>
    
    </summary>
    
      <category term="markdown" scheme="http://zhangyigong.github.com/tags/markdown/"/>
    
      <category term="blog" scheme="http://zhangyigong.github.com/tags/blog/"/>
    
  </entry>
  
</feed>
